
/* eslint-disable @typescript-eslint/no-non-null-assertion */
/* eslint-disable no-unused-vars */
/* eslint-disable @typescript-eslint/no-unused-vars */

import { add, mult, repeatTillConst } from "./helpers";

export {}

let input = `


(5 * 6 * 5 * 7) + (6 + (8 * 3 * 9 + 2 + 7) + 7 + (4 * 2 + 5)) + 8
(4 + 6 * 4) + 6 * ((2 + 5 * 3 + 3 + 7 + 3) * 3 * (7 * 8 * 7 + 2) + (3 + 5)) + 7 * 3 * 6
(7 + (3 + 6)) * 7 + 9 * 4 + 8
2 * 5 + (4 + 9 + (4 + 7 + 3 * 7 + 6) + 7 + 8) + 2 * 7 * 3
(5 * 2 + (6 * 7 * 2 * 7 * 9 + 2) * 4 + 7) * (6 + 7 * 6 * 3) + 7 + 6 * 6
5 + 9 * (2 * 3) * (3 + 5 + 4 + 8 + 3) + ((2 * 8) * (5 * 8 + 8 + 3 + 5 * 9) + 6 * 5 + 2)
4 * 5 + ((7 + 9 + 2 * 5 + 8) * 3 * 9 * 7 + 4) + (7 * (9 + 7 * 3 * 7) + 6)
4 * (6 * (7 + 9 * 4 * 2 * 5) + 4 * (4 + 2 + 9) * 7 * 2) + 5 * (4 * (2 + 6 + 3 * 3 + 5) * 5 * 9)
7 * (2 + (3 * 6) * 8 + 3 * 3 * 4) * (8 + 8 + 2 * 5 + 4 * 8) * ((2 * 5) + 9 * 6 + 5 * 8)
6 + (9 + 4 + (9 * 5 + 3 * 3) * (9 + 9 * 5 + 6) * 5 * 8) * 7 * 5 + ((7 * 6) + 4) * 2
(5 * 6 * 3) * (6 * 3 + 8) * 6 * 4 * 5
3 * 2 * 2 * 7 * (9 + (9 * 6 * 7 * 6 * 9 + 6) + (6 + 9 * 5 + 9) + 6) * 4
9 + 3 + (3 * 7 * 7 * (4 + 2 * 6 + 9 + 6 * 9) + 4)
4 * 4 + 3 + 6 * 4
(7 * 2 * (5 * 2) * 6 * (7 + 9 * 6 * 9 * 9 * 2) + (3 + 5)) * (4 + (8 * 5 * 6 * 7) * 5 + 3 + 3 + 2) * 4
2 * 9 + (7 * 9 + 3 * 3) * 4 + 6 + 8
((5 + 5) * (3 * 9 * 5 * 4)) * 3
9 * 5 * 9 * (7 + 9 * 5 * 8 * 4) * (3 * 6 + 8 * 4 + 5 * (9 * 5 + 5))
(7 * (5 * 8 * 8 + 3) + 7 + 8) * 9 + ((6 + 7 * 8 + 7) + 5 + 6 * 3 + 8)
9 * 7 + 8 * 5 + (8 * (3 * 6 + 9 + 3) * 8 * 5)
(3 * 4 + 6 + 5 * 2) + 9 + 3 * (9 + (3 + 2 + 4)) * (6 * 8 + 6 * 6 * 2 * (7 + 9))
3 + 7 + 2 + 9 + ((4 + 8 + 7) * 5 + (3 + 6) + 3 * 9 + 8) * ((9 * 2) + 3 + 6 + (5 + 6 * 9 * 6 + 8 + 5))
2 + (5 * 3 + 7 * (5 + 8 + 6 + 8 * 6) + 2 * (2 * 7 * 4 * 7 + 8)) + 8 * (2 * 3 * 7 * 5) * (7 + 3 + (8 + 2 * 3 * 9 + 9 * 2) * 2 + 8) + (2 + (5 * 4 + 2 * 9 + 2 * 3) * 3 + 5 + (4 * 9 * 2) + 2)
2 + ((9 * 5) + 4 * 5) + 7 * 4 + 7
(6 + 2 + 7) + 7 * 3
(7 * 7 + (5 + 7 + 2 * 4) * 5 + 2) * (3 + (4 * 3 + 7 + 4) + 8)
9 * ((7 * 2 + 3 * 7 * 3 * 8) + 4 + 2 * 2 + 6 * 9) * 4 + 4 + 7
3 * 2 * 6 * 8 + 2 * (8 + 5 * (9 * 5) + (7 * 3 * 5 + 3 * 2))
5 + 9 + 3 + 8 + (4 + 4)
9 * 2 * 3 * (8 + 5 * 9 + 9 + 9) + (2 * (6 + 6 + 8 + 6 + 2 * 5) * 5)
(3 + 8 * 5) + 8 * 9 + (2 + 3 * (4 * 2 * 8 + 2 * 8) * 3 + 9 * 5) * 7 * 5
(8 * 9 * (4 * 2 * 5) + 5 + 5) * 5 * 9 + 3
8 * (6 * 4 * (5 * 7 + 8 + 4 + 9) + 6) * (4 * 4 * 4 * 2 * (8 * 3 * 7 * 7 + 4)) + 2
((7 * 8) * 9 * 5) * 9 * 7 * ((4 + 6) + 3 + 2 + 3) * 5
5 * 6 * 2 * ((8 * 9 + 3 * 7) * 3 + (7 + 4))
4 + ((9 * 2 + 2 + 5 + 6 * 5) * 3) * (6 * 6)
(5 * 8 + 2) * (3 + (7 + 5 + 5 + 8) * 5 * (4 + 5 + 9)) + 2 + 3 * 8
((6 * 4 + 4 + 9 * 5 + 4) + 6 * 4 + 2) * 9 * 7 * 4 * 6
(2 + 6 * 3 + 4 * 7 + 3) * 9 + 9 + 5
9 + 2 + 9 + 5 * 4
8 * 6 * 6 * 6 + 5
2 + (5 * 5 + 7 + 8) + 6 * 4 * 2 + 6
(5 * 7 * 6 * 8 * 5) * 2
2 * 5 + (6 * (6 + 5 * 3) * 3) * (8 + 3 * 9 * 4 * 9 + (6 + 7 + 4 + 5 + 6 + 6))
2 + (8 * (5 + 6 + 9 + 6 * 8 * 6) * 7 * 5 * 2 + 3) + 7 * 5
8 + 4 + (9 * 6 + 6 * 6 * (9 + 3 * 7 + 8 * 2) * 3) + ((8 * 2 + 7 + 8) * 3 + 7 + 2) * 8
4 + 4 + (2 * 3 + 6 + (7 * 4 + 7 * 9 * 5 * 6)) + 4 * 6
(7 + 8 * 7 * 4 * 7) * 8 * (4 * 6 * 4 * 9 + 6) + 4 + 2
2 + 5 * ((8 + 5 * 9 * 2 + 3 * 5) + 2 * 9 * 2) + 5 * 7
(8 + 3 + 4 + 9 + 6 * 9) * 2 * 5 * 8 * 5 + 6
(3 * (5 + 9) * 5) * (7 + (9 * 5 * 3 * 4 * 3) * (2 * 7 + 2 * 3 + 2 + 7) * 3) + 3 * 2 * 9 + 5
(4 + 4 * 5) + 8 * 7 * 9 + 5 * (5 + 3 + (2 + 5 * 2))
(8 * 3 + 8 * 8) + 5 * (3 * 8 + 8 + (5 * 3 + 9 + 6 + 6) * 3 * 9) + (4 * 6 + 4 * 6 * (6 + 8)) + 7
3 + 4 * 2 + 8 * ((5 + 9 + 9) * 6 * 5)
2 + ((7 + 4 * 8) + 8 * (2 * 4) + 8 * 3)
(9 + 4 + (2 + 4 + 9 * 7 + 4)) * 9
8 + 8 + 6 * (3 + 7 + (4 + 6 + 8 * 7 + 7) + 9 * (9 * 3 * 9)) + 5 + 8
6 * 6 + (7 + 5 + 2 + (5 + 6 * 9 + 5 + 6)) * (2 * 7 + 6 * 9) + 6 + 3
3 * 9 + 2 * ((3 + 2 * 7) + 2 + 7) + 2 + 4
7 * (2 + 6 + 8 + 9 + 5 + 9) * 7 * 5
((7 + 3 + 8 * 5 + 3) * 3 + 3) + 3 + (5 + 9) + 2 * 6 + 6
(2 * 7 * 6) + 8 + (2 * 6 * 6 + 5 * 4 + 3) + (9 * (6 * 8 * 2 + 9 * 2) * 6 * 6)
2 + (7 * (8 + 6 + 4 * 3 * 9) + 2 + (6 + 6 + 6) + 2 + 4) + 6
2 + 5 * 5 + (4 + 6 * 5 * (4 * 2 + 4 + 6))
8 + 9 + ((6 + 4 * 4 * 2 * 4) + (3 * 2 + 6 + 6 * 8) + 5 + (6 * 6) + (3 + 7 * 9 * 4 * 4 * 8) * 2) + 3
9 * (8 * 2 + 4) * 5 * 6 * (3 + 6)
((7 * 5) + 4 + (2 * 6 * 5 * 5 * 5) + 9 * 9 * (9 * 7 + 8 + 8 + 8 * 7)) + (6 + 9 + 4 * 8 * 3 + 8) + 8 * 6 + 4 * 9
3 * 6 + (6 * 3 * 5 * 9 * 8 * 6)
2 + 7 * (6 + 2 + 9) + 7
((9 + 8 * 8 * 3 * 3) + (8 * 6 + 3) * 3) * 2
2 * 7 + 7
3 + 9 * 8 + 6 * 3 + (2 + (2 * 6) + 3)
((2 * 4 * 8 * 7) + 7 + 7 * 7) + 4 + 4 + 3 + (2 + 6 + (5 * 3 * 8 * 5) * 9)
(2 * 6 * (3 + 7) * 5) * 9 * 4 * (3 + (7 + 5) + 5 * (2 * 6 + 4 * 3 + 3)) * 9 + 5
7 + 8 + 5 + ((9 + 3 * 6 + 8 * 8 * 5) * 9 + (7 * 6 * 7 + 2) + 6) * 6
9 * (9 + 7 + 8 * 4 + 2 + 4)
8 * (2 + 9 * 9) + 9 * (9 * 2 * 8 * 7 + 2 * 2)
(9 + (5 + 3 * 6 * 8) + 6 + 2 + (8 * 6 * 2 * 5 + 3 + 3) * (7 * 9 + 3)) * 7 + 3 * (2 * 4) + 8 * 7
2 * 3 + 2 * 6 * 2 + (7 + 3 + 4 + 3 + 3 + 5)
8 + (9 + 2 + 6 * 4) + 5 * 7
7 * 9 + 4 * 7 + 9 + 8
9 + 4 * 7 * 8 + (6 + 8 + 9 * (8 * 4 * 2) + 4)
3 + (9 + 9 * 3 * 2) * 7
(7 * (3 + 3) + 9 * 3) + (3 * 7 * 9) * 3 + 2 + (3 * 9 + (2 + 3) * 3 + 7 * 5)
(5 + 2) + 5 * 9 + 3 * 9 + 9
9 * 6 * (5 + 7 * 4 * 3 + 2 * 3) * 2 * 5 + (5 * 9)
(2 + 3) * 2 + 4 * 3 + 9 + (9 * 3)
8 + 3 + (6 * 6 + (4 * 7 + 8 * 8 + 6) + 9 + 2 + 7)
(6 + 4 + 9) + 6 + (3 * 5 * (3 + 5 * 7 + 3 * 8 + 7) + 3 * 2 * 8) * 9
((6 + 7 * 5 + 2 + 6) + 5 + 9 * 6 * 8 * 5) * (5 + 3 + 7 + 4 * (4 * 6)) * (7 * 7 + 8) * ((7 * 4 + 3 * 7 + 8 + 7) * (2 * 3 + 9) + (7 + 4 * 2)) + 2
6 * (2 + (9 * 2 + 2 + 9 + 2) + (9 * 5 + 4) * 3 * 5) + (8 + 6) + ((7 * 6 + 7 * 2 + 9) * 9)
6 * 7 + (2 * (4 + 5 * 4 * 7) * (7 * 3) + 2 * 5) + (5 + 9 * (3 + 9) * 5 + 6 * (3 * 6 * 7))
2 + (2 + 7 * (9 + 3) + 3 + 9 + 9) + 8 + ((4 * 3 * 4 + 6 + 6 + 9) * 3 * 6 + 8) * 7
6 * 9 * ((5 * 9 * 4) * 8 + 6 * 6 * (7 + 2 * 5 * 7) * 9) + (5 * 3 + (4 * 5 + 3 * 3 + 4 + 5) + 3) * (6 + 8) * 5
9 * (2 * (5 * 6) + 3) * 8 * 4 * 4
4 + 3 * 9 + 2 * (9 * 6 * 5 * 6 + 9) * 5
((7 * 7 + 3 * 2 * 4 * 5) + 6 * (6 + 4 + 9 * 2 * 9) * 7) + 8 + 2 * 8 * 7
(5 * 3 + 6 * 5 + 4) + (4 + (9 * 7 * 2 * 3 + 9) + 5 * 4 * 5 + 9) + 3 * 4 * 8
(7 * 6 + 6 * 5) + (4 * 6 + 6)
(7 * 8 * 3 + 5 * 6) + 9 * 9 * 3 + 5
(4 * 6) * 5
4 + 5 + 7 * 3 * (6 * (5 + 5 * 5) * 8 + 2 + 2 + 8) * 4
8 + (8 * 5 * (3 + 8)) + 3 * (8 * (2 * 4 * 4 + 4 + 3 * 9))
6 + 5 + 2 + 2 + 3 * (8 + 4 * 7)
3 + 2 + (7 + 8 + 7) + 4 + 9
(7 + (7 + 9 + 4 + 2 + 7 * 7)) + (6 + 9) + 3 * 9
5 * (4 + 6) + 4 * (4 + 3)
(4 + 9) * (6 * 6 * 3 + 5 + 8) + 3 * 7 * 3
9 + 7 * (3 + 6 * 3) * 5 * (4 * 6 * 4 * 4) + 4
6 * 8 + 8 * (9 * (2 * 5) * (9 + 2 + 4) + (7 * 7 + 4) + 8 * 5) + 8 + (7 + 4 * (3 * 5 + 8 + 5 * 2))
8 + 4 * 3 * ((4 * 6) * 8 * (6 * 2 * 4 + 5) * (6 + 9))
4 * 4 * ((5 * 2 * 5 + 9) + 3 * (7 * 6 * 7) + 7 * 2 + 6) + 7 + 5
2 * 9 * 5 + 3 * (5 * 6 * 8 * 4 + (8 + 3 * 6 * 5)) * 6
(3 * 6 + 2) + 2 * 5 * (8 * (7 * 8) + 5 + 3)
((6 + 8 * 9 + 2) * 4 + 7 + (8 * 5 * 2 * 2) * 3 + 4) + (7 + 7 * (2 * 4 * 4 * 8 + 7 + 2) * (3 * 7 + 5 + 9) + 5 * 3) * ((3 + 3 * 9 + 9) + 9 + 8) * (4 + (8 + 7 * 3)) + 3
(6 * 2 * (7 + 3 + 2 * 2 * 5) + 8 * 9) * 5 * 2 * 7 * 9 + 6
((2 + 3 * 2 + 5 * 8 + 3) + 5 * (7 + 8 * 5 * 2 * 4 * 8) + 6 + 9) * 9 + (5 * 2 + 4) + 2 + 3
(4 + 7 * 7 + 6 * 9 + 9) + 3
2 + (5 + (7 + 5 * 6 + 4 + 9 + 2) + 2)
4 * 9 + (8 + 2 + 5 * 8)
2 + 3 * 5 * 6 + 6 * (6 * 7 * 6 + 4 * 2 * (5 + 3 + 4 + 8 + 4))
6 + 2 * (4 * 2 + 5 * (4 + 5) * 2) * 9
(5 * 8 * 5 + 5) + ((3 + 4) * 7 + 5 + (3 * 6 * 2) * 9 + 6) + 7
7 * 2 * (7 + 2 + 4 + 4 + (5 * 6 * 9 + 4 * 8))
5 * ((6 + 8 * 2 + 7 + 4) * 2) * 7 * 5 + 7 * 9
(6 + (6 + 2 * 8) * 4) * ((5 * 3 * 9 + 8) + 6 + 7) * (3 * 8 + (6 + 3) + 3 * 3 + (9 + 4 * 5)) + 3
6 + (9 * 2 * 2 + 3) + (5 * 3)
(4 + 7 * 8 * (2 + 3 + 6 * 8) * 3) + ((3 + 9) + (2 + 3 + 3) + 8 * 9 + (6 + 7 * 5 * 5) * 2) + 5 + 8 + 3 * (7 + 6 + 3 * 3 + 5 * 5)
2 * (9 + 5 * 9 * 2 + 8 + 8) * 7
9 + (4 * 4 + (9 * 4 * 8 * 8 * 6)) + 3 * 5
6 + 4 * ((5 + 6) * (3 + 6 * 3 + 2) * (2 * 5) + 3 + 2) * 6 + 4 + 6
2 + (7 * 8 * (6 * 7 * 9 + 8)) * 8 * 3 * 7 * 7
9 + 9 + 2
(8 * 6 + 8 + 2) + ((9 * 4 + 9) * 9) + 5 * 2 * 3
(2 * (2 * 6 * 6 * 3 * 5) * 6 * (4 * 9 * 9 + 4 * 5)) * (4 + (2 + 8 * 9 + 7) * 3 * 6) + 7
(7 * 6 * 4 * (9 * 7 + 4 + 7) + 7) * 6 * (2 + 4 + 8) * (5 * 4 * (7 * 9) + 4)
9 * 4 + (2 * (5 + 9 + 7 * 4) + 6 + (7 * 3) * 6 + (6 * 9 + 4 * 6 + 8 + 7)) * 3
4 + 8 * 7 + 6 * (3 * 8 * 8) + 3
7 * (7 + 4 + 8 + 3 * 7 + 7) * (9 * (3 + 3) + 5 * (8 * 2)) * 5 * (2 + (4 * 6 + 4 * 7 + 6 * 9) + 2 * (9 + 7) * 4 * 5)
3 + 9 + (6 + 8) + 4 * 7
3 * (5 * 8 + (7 + 8)) + 6 * 6 + 4 * 8
7 * (5 * (3 * 6 * 2 * 9 + 4 + 2)) + 9 * 6 * (4 * 7 * 2 * 8) * 3
(5 + 3) + 9 * (3 + 8) + 8 + (5 * 9)
4 * 5 + 2 * (6 * (9 * 2 + 4))
(9 * 9 * (5 + 5 + 5 * 7 + 6 * 8) * 4) * (9 * 5) + 5 + 7 + 7 * 8
5 + ((9 + 3 + 8 + 8 + 8) + 6 + 6) * 2 * 6
6 + (7 * 9) + (6 + 6 * 9 * 3) * 3
8 + 4 + 5 + ((7 + 5) + 7 * 7 * 2 + 2)
(3 + 4 + (6 + 5 + 5 + 6 + 9) * 4) + 8 * 8 * 7 + 6 + 7
5 + ((8 * 9 + 6) * (4 + 8 + 5 + 5 + 6 + 8)) * 4 * 4
9 + 8 * (2 * (6 + 7 * 6 + 4 * 2)) * 2 + (4 * 2 + 3 + 8)
4 * (2 + (3 * 8) * 4) + 8 * 8
9 + (3 * 9 * 6 + 5 + 5 * 2) + 3 * (3 + (8 + 6) * 3 + 6) + 4 * 3
6 + (6 * 3 * 9 * (5 * 7 + 8 * 9) + 3 + 8)
4 + (2 + 2) + (5 + 4 + 3 * 2 * 5 + 5) + (2 + 9) * 2
4 + 3
4 * ((3 + 8 + 4 + 6) + 6 + 7 + 8 + 9 * 9)
(7 * 9 + 5 + (4 + 5 + 7 + 9 * 4 * 2) * 2) * 5
2 + 8 * 2 + 5 * 2
4 + ((7 * 8 + 4) + 5 * 8 * (5 + 2) + 9) + 2 + 8 + 6
7 + 7 * ((7 * 6 * 6 + 3 + 8 * 5) + 7 * 8 * (6 + 2)) + 6 * 5 * 8
8 * 4 * 7 + 4
2 * 2 * 7 + 4
9 + (6 + 7 + (4 * 2 + 4)) + 9 + 5
6 + (7 * 6 * 8 + 9 + 6 * 7) + (6 * 7 * (3 + 4 * 6 + 9) * 8 * 6 * (5 + 6 + 7 * 6 * 3)) + 4
7 * (8 * (8 + 6) * 8 * 2 + (9 + 8 * 6 + 3) * (6 * 4 + 7 + 7)) + 9
5 * 9 + (7 * 5 + (4 + 2 * 5 * 6 + 9 + 9) * 8 * 6)
4 + (8 + 8 * 2 * (3 * 7 * 4 * 5) * 8 + 4) + 9 * 9 * 3
7 * (3 + 9 * 2)
9 * ((8 + 8) + 5 + (4 * 3 * 9) * (5 * 3 * 2) + 2 + 8) * 2 + 5 * ((5 * 7) * (5 + 7 + 7 * 6 + 5) + 5 * 4 + 6 + 5)
9 + 6 + ((5 + 9 + 9) * 8) * 2 * 8
7 + (2 * (7 * 3 + 8) * 8 * 3 + 2 * 5) + 4 + 9 + ((3 + 6 * 9 * 3 + 6) * 8 * 9)
7 + 7 + 2 * 3 + 5 * (3 * 5)
5 + 6 * 6 * 8 + (3 * 9 * 7 + (4 * 4 + 3 + 4 + 7 + 6) * (7 + 6) + 2)
(9 * (3 * 3 * 8 * 7 * 3 * 8)) + (2 + 3 * 8 * 6) + 6
(6 * 6 + (6 * 7 + 3) * 5 * (4 + 9) + 7) * 3 * 6
2 + 9 * 2 + 5 * (3 * 4 + (4 + 6 + 5 * 8 * 2) * 9 * 3) + (8 + 7 * 9 + 6 + 3 + 3)
(3 + (2 * 7 * 9 * 8 * 4)) * (6 * (6 * 5 * 2) * 9 * 7 * 9 + 3) + 6 + 4 * (6 + 9 + 4 + 2) * 3
2 * 7 * ((4 * 8 * 4 * 9) + (8 + 2 + 2 + 7 * 7 + 6) * 9)
2 * 3 + 4 + 9
(5 + (8 + 8 * 7 + 7 * 3 * 2) + 4 + (3 + 9 * 6) * 4) + ((3 + 2 + 6 * 4) + 6 * 7) + 2 * (5 + 8 + (3 * 7 * 7 * 9) + (2 * 7) * 7 + 5) + 6
8 + (9 * 5 + (6 * 4 * 6 + 5 + 2 + 7) * (7 + 8) + 7 + 5) + ((7 * 3 * 7 + 8 * 4 * 6) + 9 * 7 + 6 + 3 + (4 * 7 + 2)) * 9 * 3
(3 + 9 + 5 + 5 * 8) * (7 * 6)
(2 + 4) * (5 * 9 * 8 + 7 * 5 + 5) * 9 + (7 * 3 + 9 + 3)
6 * 5 * 2 * 6 + 6 + 8
7 * (5 * 8 + (3 + 6) + 6 + 7 * 2) * 9 + 3
2 * 7 * 9 * (7 * (9 + 9) + (9 + 2 * 5)) + 5 * 5
6 + 9
8 + 9 + 8 + 8 + 9 + 9
2 + (9 * (2 * 3 * 9) + 7) + 5
(7 * 4) + (9 * 5 * 2)
(4 + 2 + 6 + 8 * 4 * 8) * 7 * 8 + 7 + 2
(6 + 9 * 9 + 7 * (5 * 7 * 6 + 9 * 5 + 2) + 3) * (2 + 4 * (8 * 3 + 2 * 4 * 2 * 8) + 9) * (6 + 6 * 2 * 6) + 5
2 * 2
6 * ((5 + 9 + 3 + 3 * 7 * 4) * (7 * 7 * 9 * 3) * 2 * 9 + 5) + 5 + 3
(9 + 8) + (5 * 6 + 7) + 2 * (8 + 8 * 4 + (3 + 9) + (5 + 4 * 8 + 6 + 2)) * 5
9 * 5 * 2 + ((9 * 5) + 2) + (8 + 5 * 5 + (9 + 6) * 7)
3 + 5 + ((5 * 9) * (3 * 9 * 7 + 7)) * 4
(7 * 4 * 9 * 5 + 9) + 5 + 4
2 * (6 * 4 * 6) * (4 + (6 * 6 * 7) * 4 * 4 * (6 + 8 * 2 + 5 + 7 + 9) + 2) * 3 * 5 * (8 * 9 * 4)
(7 + (8 * 2 + 2 + 5 + 7 + 2) + 7) + 2
(4 * (4 * 6 * 9) * 6 * (5 * 3 * 9) + 5 + 7) * 7 * (2 + 6 + 4 * 3 + 9 * 5) + 2
7 * 5 + 9 + (7 + 8 + 4 + 6) + (4 + 9 + 3 * (3 * 6))
(8 + 5 + 9 + 8 * 4) + (2 * 7 + 4)
(5 + 9 * (9 * 9 + 2) * 5 + 4 + 4) + 6 + (7 * 4 + 8 + 5 * 4) * 4 * 8
4 * (8 * (4 * 3 * 7 * 8 * 2)) + 4 + 3 * 2
8 * 8 + (5 + (5 + 5 + 9 + 3 + 6 * 2) * 7 + 5) + 6 + 8
(7 * (2 + 5 + 7) * 9 + 5 * 4) + 8 * 4
(2 * 6 + 3 * 8) * (6 + 5) * 9
7 + ((2 * 5) + (3 + 9 * 4 * 2 + 9 + 9) * 7 + 5 + (5 + 7 * 9 * 3 * 7) + 4) + 4 + 8 * 2
(4 + 4 * 9 * 4) + 4
4 + (4 + 5 * 4 + 9 * (3 * 3)) * 7 * 9 + (7 + (8 + 9 + 5)) + 4
8 * 8 * 6 * 2
((8 + 6 + 8 * 8 + 9) + 8 * 8 * 7 + 7 + 2) * 8 + 5 + 4 * 5 * 9
3 + 3 * 6 * 5 * 5 + (3 + 7 * (5 + 2 + 5) + (2 * 2 + 6 * 2 * 4 + 3) * 9 + 4)
(7 * 5 * 8 + (8 + 4 + 8)) * 8 + (2 + 5 + 9 * 2) + 9
(7 + 3 + 8 * 6 + 8) * 5 * 6 * 2 + 2 + (6 * 7)
((9 + 6 * 7 * 3 + 2) + 6 * 4) * 6
5 * 7 * ((9 * 7 + 3 + 2) * (5 + 6 + 8)) + (4 + 8 + 6 * 6)
3 + 2 + (3 + 7) * 7 * ((6 * 8 * 4 * 2 * 9) + 9)
6 + 5 * 9 * 8
2 * (8 + 9 + 5 * (4 * 5) + 7 + (8 * 6 * 4 + 9 * 3)) * 7 * 8
7 * 3 + 7 + 3 + 5
(4 * 6 * 6 * (3 * 2 * 2 * 6 * 2 * 5) * 3) * 3 + 6
(5 * 7 + 9 * 5 * (2 + 5 * 4 * 4 + 3) + 6) + 9 + 6 + 5 * 3 + 7
8 + (7 * 5 + 7 + 9 * 8) + 8 + 7
((9 * 8 * 7 + 2 * 6) + 3 + 9) + 5 + 3
(9 + (5 * 9 * 3 + 7) + 6 * 9 * 8) + (4 + 6 + (7 * 8 + 7 * 2 * 6 * 4))
5 * (5 + (2 + 2 + 7) + 7 + 4)
8 + (2 + 8 + (7 + 4))
6 * 7 + 2 + (3 * 3 * 9) * (5 + 4 * 9)
7 + (2 * 3 * 3 * 6 + (6 + 2 * 7 + 4 * 2 * 5)) + 2 + 5 * 3
((4 * 9 * 4) + 3 * 6 * 5) * ((4 * 8 + 2) + (7 + 5 * 5) + 4) * 4 * 2 + 2 + 3
3 * (8 * 6 * 4 + 4) + 3 + ((7 * 8 * 9 * 5 * 2 + 7) * 6 + (5 * 5 * 3 + 5 + 7 * 9)) * 5 * 7
3 * 6 + (9 * 4 * 9)
6 * (3 + 5 * 8 * 7 + 2)
4 * 7 * 6 + 3 + 2 * 4
(9 + 9 * 7) + 2 * 6 * ((5 * 9 * 4 * 3 + 8 * 2) * 5 + (6 + 2 * 2) * 2)
4 * (6 * 5 * 4 * (8 + 9 + 2)) * (7 + 7 + 6 + (8 * 6 + 5) * 6) * 5
9 * (6 + 8 * 7 + 5) + 8 + (8 * 4 * 4 * 9) * 2 * 9
(6 * 2 * 3 + (9 + 2 + 8)) + 9 * 9 + 8 * 4 + 7
(2 + 5 + 6 + 7 + 3) * 8 + 9 * 3
5 + (3 + 5)
9 * 4 + 4 * 8 + 7 * ((7 * 6 * 2 + 4 * 3) + 6 * 9 + 6)
7 + (8 + 3 + 2 * 8 * (7 * 9 + 4 + 3 + 2)) * (4 + 9 * 7 * 2 + 5 * 2)
7 * 6 * ((2 * 7 + 4) + 8 * 6 + 4 + 3) + 2 * 2 * ((8 * 9 + 8 * 3 * 6) * (2 * 2 * 9 + 7 + 7) + 3)
7 + (7 + (8 + 7 + 2 * 7) * 3 * (7 + 3) + 3 + 4) + 4 * 9 + 7
7 + 6 + (9 * (5 + 6) * (7 * 3 * 9 * 8) * 7 * 6 * 7) + (9 * (9 * 9 + 7 * 8 + 9) + 6 * 5)
(9 * 8 * 9) * 9 + 8 + 8 + 9 + 6
2 * 2 * 5 + (8 * 9 * 7 + 8 * 6 + 5)
3 * 7 * 4 + 5 + (4 * 4 + 5 + 8)
(4 + (7 + 8) * (2 * 6 + 6 + 5)) + 2
(7 + 9 * 2) + 7 * 9 + 6 + (4 + 9 + (4 * 4 + 5 + 4))
2 + (2 + 3 * 7) * 3
8 * (9 + (5 + 9 + 3) + 8) * 8 + 9
8 * (7 * 8) + 7 + 9 + ((9 + 4 + 7 * 3 + 8 * 6) + 3 + 3 + (4 * 6 + 7 + 8) + 6) + 4
4 * 7 * 8
((4 * 6 * 3 * 6 + 6) * 3) * 4
4 + (6 + 5 * 2 * (4 * 8)) * 9 + 4 * 2
6 * 5
(6 * (3 * 2 + 6 + 5 * 4 + 9) + 3 * 7 + 3) + 6 + 5 + 8 + 2
6 * 2 + 7 + 4 + 4 + (9 + 2 + 4 + 9)
8 * 2 * (6 + (5 + 9 * 9) + 9 + 2)
(7 * 7 * (3 + 8 * 2 * 8) + 3 + 2) + 5
((6 + 4 + 3 * 3 * 9 + 8) * (5 + 4 + 6 + 3) + (3 + 4 + 5 + 3) + 7) + 7
3 + 5 + (2 * (7 + 9 * 3) * (4 + 3 * 9 * 4 * 5))
3 + (6 * 9 + 7) * (2 * (4 + 3 * 5 + 5) + 7 + 5 + 2 * 2) + 8 * 5
(3 + 3) + 3 * 2 + 6 * (2 * 5 + 7) * 8
3 * 8 + (3 * 9 * 2 * (9 + 6 * 6 * 6 + 6) * 8) * (2 + 4 + 9) + 4
6 + 2 * 7 * ((7 + 8 * 9 * 3 * 3 * 9) + (3 * 8 + 5 + 2) * 9 + 8 + 4)
3 + ((6 * 2 * 5 * 3 * 9 + 9) * 3 + 7 * 8 + 6) + 9 + (2 + 7 + 9)
((8 * 7 * 7 * 2 + 7 + 9) * 9 * 7 + 7 + 5) * 7
3 * 3 + 9 + 3 * 2 * 4
(5 * 6 + 4 + 2 * 2 + 5) * 4 * 3 * 5 + (5 + 2 * 7 + 8 * 5)
9 * 5 + 5 * (4 * 8 * 8 + 7)
3 + ((2 * 9) * 3 * (3 * 2 + 3 * 7 * 9) * 6) * 3 * (6 + 9 * 4 * 2) + 5
((8 * 9 * 6 * 5) * 2) * 4 + 4 * 5 * 2 * (5 + 4 + 2)
7 + ((6 * 9 + 6 + 4 + 7 + 5) * (7 + 6 + 8) * 8)
6 + 5 * (9 * 7 + (3 + 8)) + 2 + (8 * 6 * 9) * (6 * 4 + 5 + 6)
((7 + 6 + 2 + 8) * 2 * 4 + 2 + 3) + 7 * 5
6 * 2 * 8 + (9 * 5 * 5 + 6 * (6 * 4) * (5 + 7 * 7 * 3)) * ((2 * 4 + 4) * 2 + 8 * 8 * 6 * 7) * 8
7 * (9 + 7 * 7 + 8 + 7) + 8 * 6 + 4 + 2
(9 + 5 * 8 + 3 + 4) * 2 + ((7 * 5 + 6 * 3) + 3 + (2 * 5 * 7 * 6 + 5) * 7 + (4 * 5 + 8 + 3)) * 2 * 9 + 7
6 * 8 + (2 + (3 + 7 + 2 + 6 * 5 * 2) * 4 + 3 * (9 * 3 + 6 + 6 * 6)) + 3 * (8 * 3 * 2) * (7 * 5 + 6)
(3 + 6 * (5 * 3 + 3 + 3 * 6 + 4) * (5 + 3 * 5 * 9 + 6 * 5)) + 2 + 3
8 * (5 * 9 * 6 + 2 * 2 + 4) * 3 * 5 + 4
8 * (4 + 9 + (7 * 6)) + 8 + 5 + (7 + 6 + (8 * 7 + 9 + 4 * 5 + 9) + 7 * 4) + 9
(2 + 5) * (3 * 8 * (4 * 3) * (4 + 3 * 5 + 9 * 6 * 3) * 9)
(7 + 5 + (4 + 7 * 5)) * 4 + 9 + 6 + 8 + 3
(2 * 3 + 2 * 3 * 7) * 4 * 6 * (5 * 5 + 8 + 9 * (6 + 8 + 8 + 4 * 6 + 6)) * 2 * 5
7 + (7 + 8) * 6 + 5 * 6
(7 * (8 + 9 * 3 + 5) * 4 * 3 * 2 + (8 * 7 * 2 * 8)) + 8 * (9 + 6 * 4 * 3 * 4) * 9
8 * 5 * (7 * 5 + 3 * 4) + 5 + 8
4 + 9 + (8 * (5 + 4 * 6 + 9) * (4 * 5 + 4) * (3 + 6 + 7 * 4 * 5 + 8) + 8)
(3 * (9 + 2 * 7) * 4 + 5 * 8) * 8
5 + 9 * 2 * (5 + 6 + 4 * 9 + 5) + 8
2 * (2 * 9 * 4 * 7)
(5 * 8 + 3 * (2 * 8 + 5 * 2 + 6) + 8) * ((2 + 6) + 7 * 2 * (5 + 3 * 3 * 7 * 5) + 3 + 4) * 5 * 9 * 8 + 9
(9 * 5 + (5 + 3) + 8) + 8
7 * 4 + 7
4 * ((9 + 6 * 7) + 9 + 7 + (3 * 9 * 3 * 7 * 7) * 6 * 5) * (7 * 6 + 5 * 5 + 9) * 6 + (4 + 3)
(6 * 4 + 7 * (9 + 2 + 8) + 5) * 8 + 7 + 5 * ((5 + 4 + 9) + 9 * 3 * 3) + 5
6 * (5 * 8 * 9 + (3 + 3 + 4) + 8) * 5 * 3 * (6 + 3 * 3 * 9) + (3 + 3 * 7)
(8 * 6) * 6 * (6 + 5 * (2 * 2) * 5 * 9) * (3 * 5 + 3 + 4 + 9)
7 + ((3 + 6 * 4 * 4 * 8) + 4 + 8 + 4 + 6) + 7 * (9 + 2 + 7) * 4 + 7
(7 + (8 + 6 + 9 + 9 + 4 * 8) + 9 + 9 * 6) * (2 + (5 * 6) + 8 * 8) + ((9 * 7) + (7 + 7 + 5)) * 5
4 * (7 * 2 * 9) + 9 + 5
(6 + (4 + 7 * 5) * 4 * 9 + 3 * 7) + 8
9 + ((5 + 6 * 2 * 2 + 8) * 9 + 8) * 9 + (7 + 5 + 5) * (9 * 5)
7 + 9 * (3 + (6 * 3 + 8 + 3) + (5 * 2 * 5 * 9) * 4 * (9 + 4 + 3 + 8 * 5 + 2) + 4) + 7
(2 * 3 + 6) + (5 + (6 * 8 * 2 + 5 + 6 + 5) + 6 + 7 + (9 * 9 * 8 * 9 * 3)) * ((7 + 3 * 3 * 4 * 8) + 4 + 3) + 2 + (6 * 3 + 4 + 9 + 9) + 3
8 + (5 + (3 + 2 * 6 + 6 + 6) * 4) * 7 + 4 * 3
2 * 7 * 7 * (4 + 8) + 5
8 * 9 + 9 * ((6 + 4 * 4 * 6 + 5) + (4 + 3 + 7 * 8 + 3) + 6 + 4 * 5) * 9 + 6
5 + 6 + 9 + 7 + (6 * 8 * 5 * 7 + 3 + 7) + 6
8 * 8 + 6 + (3 * 6 + 4 + 9 * 7) * (5 * 3 * (4 * 5 * 9 + 2 + 9 + 2) + (6 * 2 * 6 + 7 + 6 + 6) * (8 + 6) + 9) + 7
9 * (7 * 8) * 9
5 + (5 + 3 + 7 * 9) * (5 * (9 * 8 + 9 + 2 + 4 * 8) + 6 + 5 + 3)
2 + 3 * 7 + (3 * (4 + 2) + 9 + 7 + 2) * 6 * 2
5 + 3 + (2 + 2 * (8 + 6 * 5 + 9 * 6)) * 7 + 4
8 + (7 * 7 + (7 + 5 + 9 + 6 + 5)) + 8 + 2 + 3 * 6
7 * 8 + 8 * (8 + 2 * 4) + 8
2 * 5 + 4 * 5 * 9 * (8 * 2 * (6 * 7 * 6 + 2 * 5))
8 * 9 * (8 * (6 * 7 * 8 * 9 + 2) * 5 * 9 + 7 + 7) + (8 + 6 * (9 * 9) + (8 + 9 + 9) + 3) + 8
(5 + 8 * (3 + 4 * 8) * (7 * 2 + 8) * 6) + 7 + 3 + (6 * (9 + 2) + 8 + (7 * 2 + 9 * 7 * 8 + 8) + 4) + (7 * (7 * 5 * 5) + 5) * 3
6 * (2 + 5 * (7 + 3 * 9 + 8 + 8 + 5) + 5) + 6 * 6
6 * 9 + 2 * 4 * (9 + 3 + 4 + 4) * 3
2 * (6 * 6) + 2 * 7
(7 * 5 + 7) + 7 * (5 * (9 + 2 + 2) + 4 * 6 * 4 * (7 * 8 * 6 + 7 * 7)) * 7 + 2 * 3
3 * (9 + 3 + (3 + 2 * 3 * 3 * 6 + 4) * 2 * 9 + (7 * 3))
((8 * 8 * 8 * 4) * 7 + (7 * 3) + (3 + 6 * 8 + 2) + 5 * 6) * 4
2 + 7 + 5 + 8 * (9 + 9 + 6 * (5 + 8 + 7 + 3 + 7))
8 + 3 + (9 * 2 + 2 + 4) + (5 + 8 * 2)
(8 * 7) * ((5 * 5 + 7 + 2 * 2) * 2 * (8 * 5 + 4) * 7 * 2) * (5 + 2 + 6 * 8) + 6 * 4 + ((9 + 9 + 5) * 7 * 8 * 8 * 8)
(6 + 7 * 4) * 7 + 4 * (4 * (6 * 2 + 8) * (3 * 5 + 7) + 6 + 6)
(3 * 6 + 9) + (6 * 8 + 6) * 8 + 5 + 4 * 7
4 + 2 * (6 + 2 + 4 + 3) + 6
8 + (6 * (8 * 8 + 6) + 2 + 9) * 4
3 + 7 + 9 + 2 * 9 + (5 * (2 + 7 * 2 + 5 + 4 + 3))
8 * ((6 * 4 + 2) + 2 + 2) * 2 * (3 * 3) + 6
(6 + 5) * 8 * 7 + 4
9 * ((3 + 9) + 8 * 5 * 8 * 5) + 9 * 2
2 * 3 * (5 * 6)
((2 + 4 * 7 + 4) * 4 + 8 * (4 * 2)) + 8 * 5
6 * (9 + 6 + (8 + 3 + 8 * 7 + 4) * 4) + 7
2 * 5 * ((3 + 7 * 6 + 6 * 2) * 4) * 3
8 + ((7 + 3 + 7 * 7) * (6 * 4 * 6 * 3 + 3 + 9)) * (8 * (3 * 5 * 5 * 6 + 6 * 7) + 5 + 4)
6 * 7 + 6 + (3 * 2 * 2 * 7 * 4 + (4 + 9)) * 4
4 + 4 * 2 * 5 * (7 + 7 * (7 + 5) * 4)
3 * (9 + 9 * 2 + 4 * 5) + 5 + 2 + 2
5 * 3
4 * (3 * (8 + 9) * 4 * 8 + (5 * 5 * 4 * 2 + 8) * 2) * 6 * 7
2 + ((3 + 9 * 9 * 9 * 4) * 6 * 3 + 6 + (4 * 8 * 6 * 8)) * 8 + 5
2 + 4 + (8 * 3 + 8 * (7 * 2 + 5) * 9 * 8) * (2 * 6 + 7 + 7) * (8 * 3 + 6 + 7 + 7) * 7
3 * (2 * 9 * (2 + 2 * 9) * 4) * 9 + ((6 * 6 + 2 + 5 * 6 + 5) * 9)
(3 * 4 + 2) * 9 * 9 + 5 * 4
4 * (9 * 9 + (6 * 5 + 3) * 2 * 3 + 4) + 9 * (7 * 9 + 3 + 3) + 2
7 * 2 + 3 * (9 + 3)
(8 * 3 + 7 * 4 * 5 + 8) + (4 * (8 + 2 * 7) * 2 * 8 * 2 + 9) + 3
7 + 9 + 8 + 6 * ((2 * 6 * 8) * (4 + 9 * 5 * 5 + 3 + 6) * 6 + 8) * 8
(4 * 6 + 4 + (7 * 9 + 6 + 6)) + 2 + 5 * 7 * 4
(2 + 9) * 3 + 5
6 * 7 + 3
8 + 2 + 3 * (5 * 2 * 9 * 5) * 5
3 + 8 + (8 + (5 + 8 + 4) + 3 * (9 * 7 * 2 * 7 * 8) * 7) + 5 * 8 + (2 + (7 + 9 * 6 + 6 * 6))
7 * 6 * 8 * (8 + 5 + 6 * 7 * 4 + 3) * 8 + 8
9 + 9 * 4 * 6 * ((3 * 9 * 9 * 4) + 2 + 2 + 9) + ((9 * 4 * 3 + 8 + 3) + 8 * (6 * 4 + 2 + 5 + 4) * 2 + 5 + 9)
(7 + 9 + (4 + 3 + 7 * 8) + 2 + (6 * 4 + 7 * 8 * 3)) + 6
(3 + (6 + 6 + 7 + 9 + 6) * 8 + 4 + 6) * 9 * 2 + (7 * 2 * 6 * 5 * 6 + 9) * ((7 + 4 * 7 + 4 * 9 + 9) + 6 * 4 * 8 * 9) + 4
9 * (2 * 7 + 4) * 6 + 7 + 2
(4 * 5 * 9 + 2 * 9 + 2) + 5 * 4 * (3 + (2 + 3) + (6 * 5 + 5 + 5 + 2 + 3) + 5)
8 * 6 * (4 * 8) + (3 + 8 + 9 + 6 * 3) + (8 * 8)
(6 * 5 * 7) + 3 + 7 * 4



`.trim()

const testInput1 = `




1 + 2 * 3 + 4 * 5 + 6
1 + (2 * 3) + (4 * (5 + 6))
2 * 3 + (4 * 5)
5 + (8 * 3 + 9 + 3 * 4 * 3)


`.trim();


const { log } = console;

// console.log = () => {} // <----------------------------------

input = testInput1; // <---------------------------------------

const lines = input.split("\n");
const paragraphs = input.split("\n\n");

const evalExpr3 = (e: string) => {
  let s = e
  s = s.replace(/ +/g, '')
  let n = s
  while(!/^\d+$/.test(s)) {
    console.log(n)
    s = n
    n = s.replace(
      /(\d+)[+](\d+)/,
      (match, a, b) => `${ +a + +b }`
    )
    if(n !== s) continue
    n = s.replace(
      /(\d+)[*](\d+)/,
      (match, a, b) => `${ a * b }`
    )
    if(n !== s) continue
    n = s.replace(
      /(\d+)[-](\d+)/,
      (match, a, b) => `${0}`
    )
    if(n !== s) continue
    n = s.replace(/\((\d+)\)/, '$1')
  }
  return s
}
log(lines.map(evalExpr3))


const evalExpr2 = (e: string) => repeatTillConst(e, s =>
  repeatTillConst(s, s =>
    s
      .replace(/(\d+) \+ (\d+)/g, (_, b, c) => +b + +c + "")
      .replace(/\((\d+)\)/g, "$1")
  )
    .replace(/(\d+) \* (\d+)/g, (_, b, c) => +b * +c + "")
    .replace(/\((\d+)\)/g, "$1")
)

// log(lines.map(evalExpr2))

const evalExpr = (_e: string) => {
  const e = [..._e].filter(x => x !== " ")
  const stack = [];
  let ops = [];
  let pCount = 0;
  for(; e.length;) {
    console.log(stack, ops, e)
    const x = e.shift();
    if(x === "+") {
      ops.push(x)
      continue;
    }
    if(x === "*") {
      ops.push(x)
      continue;
    }
    if(x === "(") {
      ops.push("(")
      continue;
    }
    // if(x === " ")
    //   continue;
    if(x === ")") {
      ops.pop();
    }
    if(x !== " " && !isNaN(+x))
      stack.push(+x);
    if(e[0] === "+") {
      ops.push("[")
      pCount++
    }
    if(stack.length >= 2 && ops.length >= 1 && ops[ops.length - 1] !== "(" && ops[ops.length - 1] !== "[") {
      let [a, b] = [stack.pop(), stack.pop()];
      let op = ops.pop();
      let r = op === "+" ? +a + +b : a * b;
      stack.push(r)
      if(ops[ops.length - 1] === "[") {
        pCount--;
        ops.pop()
        e.unshift(" ")
      }
    }
  }
  return stack.pop()
}


// log(


//   lines.map(evalExpr),
//   lines.map(evalExpr).reduce(add, 0),


// )
